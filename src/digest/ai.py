import json
from pydantic import BaseModel, ValidationError, Field
from shared.my_openai import call_openai_with_structured_outputs, CONTEXT_WINDOW_SIZE

# --- Pydantic Models for Validation ---

class NewsletterSource(BaseModel):
    """Represents a single source article within a category."""
    title: str = Field(..., description="The title of the source article.")
    url: str = Field(..., description="The URL of the source article.")
    highlight: str = Field(..., description="A brief 1-2 sentence highlight of what's most notable or interesting about this article.")

class CategoryContent(BaseModel):
    """Represents the content for a single news category."""
    category_name: str = Field(..., description="The name of the news category.")
    summary: str = Field(..., description="Overall summary of the category's key developments (3-4 sentences).")
    sources: list[NewsletterSource] = Field(..., description="A list of source articles for this category.")

class NewsletterContent(BaseModel):
    """
    Defines the expected structure for the entire newsletter content generated by Claude.
    Used for validating the response.
    """
    opening_paragraph: str = Field(..., description="A concise opening paragraph highlighting 3-5 key stories across categories.")
    # Using an array of categories instead of a dictionary with arbitrary keys
    categories: list[CategoryContent] = Field(..., description="News content organized alphabetically by category name.")

# --- Helper Function ---

def _prepare_feed_data(feeds):
    """Transforms the input feeds into a JSON-serializable structure for the prompt."""
    feed_data = []
    for feed_title, records in feeds:
        category_data = {
            "category": feed_title,
            "articles": []
        }
        for record in records:
            # Skip potential summary records if they exist
            if "overall_summary" in record:
                continue

            article = {
                "title": record.get("title", "(No Title)"),
                "url": record.get("url", ""),
                "published": record.get("published", "(No Date)"),
                "summary": record.get("summary", "(No Summary)"),
                "notable_aspects": record.get("notable_aspects", ""),
                "domain": record.get("domain", "")
            }
            category_data["articles"].append(article)

        if category_data["articles"]: # Only include categories with articles
             feed_data.append(category_data)
    return feed_data


# --- Core Function ---

def generate_newsletter_digest(feeds):
    """
    Generates a structured newsletter digest using OpenAI's gpt-4o-mini,
    including validation.

    Args:
        feeds: A list of tuples, each containing (feed_title, list_of_records).
               Each record is expected to be a dictionary with article details.

    Returns:
        dict: A dictionary containing the validated newsletter content, matching
              the NewsletterContent Pydantic model structure.
    """
    # 1. Prepare Data for Prompt
    feed_data = _prepare_feed_data(feeds)
    if not feed_data:
        print("No valid feed data to process. Returning.")
        return None

    news_content_json = json.dumps(feed_data, indent=2)
    news_info = f"Here is the news content to organize into a newsletter:\n\n{news_content_json}"

    # 2. Define Prompt with Enhancements
    # Concise example added

    prompt = f"""
You are creating a daily news digest email newsletter. Your task is to organize the provided news summaries
into a well-structured, informative newsletter. Follow these guidelines:

1. Start with a concise opening paragraph that:
   - Directly summarizes 3-5 key stories from across categories.
   - Mentions specific, eye-catching details or statistics.
   - Maintains a professional, informative tone.
2. Organize stories alphabetically by the topic/category name in the `categorized_content` JSON object.
3. For each category, provide:
   - An overall summary of key developments (3-4 sentences).
   - A list of sources (`sources`) containing objects with `title`, `url`, and a brief 1-2 sentence `highlight` for each article capturing what's most interesting or notable about it.
4. Use a professional tone focusing on information delivery.
5. Focus on delivering substantive information clearly and concisely.

Here is the news content to organize into a newsletter:

{news_content_json}
"""

    # 3. Prepare Initial Messages
    initial_messages = [
        {"role": "user", "content": prompt},
    ]

    # print out the initial messages
    print(f"--- Initial Messages ---")
    print(f"Initial messages: {initial_messages}")

    # 4. Implement API Call and validate
    try:
        # Make API call to OpenAI
        newsletter_data = call_openai_with_structured_outputs(initial_messages, NewsletterContent)
        print(f"--- Successfully called OpenAI ---")
        return newsletter_data

    except ValidationError as e:
        print(f"--- Pydantic Validation Error ---")
        print(f"Error details: {e}")
        raise e

    except Exception as e: # Catch other errors (e.g., API errors, network issues)
        print(f"--- Error during OpenAI call or processing ---")
        print(f"Error details: {e}")
        raise e
